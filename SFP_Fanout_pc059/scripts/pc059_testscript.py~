# -*- coding: utf-8 -*-

#IMPORT THE LIBRARIES WRITTEN FOR AIDA TLU
#CHANGE THIS PATH ACCORDING TO WHERE THE FILES ARE SAVED ON
#LOCAL MACHINE
import sys
sys.path.append('/users/phpgb/workspace/myFirmware/AIDA/packages')

import uhal
from I2CuHal import I2CCore
import time
#import miniTLU
from si5345 import si5345
from AD5665R import AD5665R
from PCA9539PW import PCA9539PW
from E24AA025E48T import E24AA025E48T

manager = uhal.ConnectionManager("file://./pc059_connection.xml")
hw = manager.getDevice("sfpfanout")

# hw.getNode("A").write(255)
reg = hw.getNode("version").read()
hw.dispatch()
print "CHECK REG= ", hex(reg)


# #First I2C core
print ("Instantiating master I2C core:")
master_I2C= I2CCore(hw, 10, 5, "i2c_master", None)
master_I2C.state()




#
# #######################################
enableCore= True #Only need to run this once, after power-up
if (enableCore):
   mystop=True
   print "  Write RegDir to set I/O[7] to output:"
   myslave= 0x21
   mycmd= [0x01, 0x7F]
   nwords= 1
   master_I2C.write(myslave, mycmd, mystop)


   mystop=False
   mycmd= [0x01]
   master_I2C.write(myslave, mycmd, mystop)
   res= master_I2C.read( myslave, nwords)
   print "\tPost RegDir: ", res



#######################################################
#CLOCK CONFIGURATION BEGIN
zeClock=si5345(master_I2C, 0x68)
res= zeClock.getDeviceVersion()
zeClock.checkDesignID()
#zeClock.setPage(0, True)
#zeClock.getPage(True)
clkRegList= zeClock.parse_clk("./../../bitFiles/TLU_CLK_Config.txt")
zeClock.writeConfiguration(clkRegList)######
zeClock.writeRegister(0x0536, [0x0B]) #Configures manual switch of inputs
zeClock.writeRegister(0x0949, [0x0F]) #Enable all inputs
zeClock.writeRegister(0x052A, [0x05]) #Configures source of input
iopower= zeClock.readRegister(0x0949, 1)
print "  Clock IO power: 0x%X" % iopower[0]
lol= zeClock.readRegister(0x000E, 1)
print "  Clock LOL: 0x%X" % lol[0]
los= zeClock.readRegister(0x000D, 1)
print "  Clock LOS: 0x%X" % los[0]
#CLOCK CONFIGURATION END

#######################################################
#EEPROM BEGIN
zeEEPROM= E24AA025E48T(master_I2C, 0x57)
res=zeEEPROM.readEEPROM(0xfa, 6)
result="  EEPROM ID:\n\t"
for iaddr in res:
    result+="%02x "%(iaddr)
print result
#EEPROM END

#######################################################
# #I2C EXPANDER CONFIGURATION BEGIN
# IC28 EQUALIZER EXPANDER
IC28=PCA9539PW(master_I2C, 0x74)
#BANK 0
IC28.setInvertReg(0, 0x00)# 0= normal
IC28.setIOReg(0, 0x00)# 0= output <<<<<<<<<<<<<<<<<<<
IC28.setOutputs(0, 0xFF)
res= IC28.getInputs(0)
print "IC28 read back bank 0: 0x%X" % res[0]
#
#BANK 1
IC28.setInvertReg(1, 0x00)# 0= normal
IC28.setIOReg(1, 0x00)# 0= output <<<<<<<<<<<<<<<<<<<
IC28.setOutputs(1, 0xFF)
res= IC28.getInputs(1)
print "IC28 read back bank 1: 0x%X" % res[0]

